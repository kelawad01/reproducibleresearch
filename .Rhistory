install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
library(datasets)
data(iris)
?iris
head(iris)
tapply(iris$Species, iris$Sepal.Length, mean)
tapply(iris$Species, iris$Sepal.Length, summary)
tapply(iris$Sepal.Length, iris$Species, summary)
apply(iris[, 1:4], 2, mean)
result <- apply(iris[, 1:4], 2, mean)
class(result)
length(result)
library(datasets)
dat(mtcars)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug(ls)
ls()
debug
2
2
debug(ls)
ls
0
exit
browse()
esc
r
c
library(datasets)
data(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
?debug
source('~/Data Science Specialization/Course Data/makeCacheMatrix.R')
makeCacheMatrix$set(matrix(1:4, 2))
makeCacheMatrix(1:4, 2)
makeCacheMatrix(matrix(1:4, 2))
cacheSolve()
cacheSolve(x)
my_matrix <- matrix(1:4, 2)
makeCacheMatrix(my_matrix)
cacheSolve(my_matrix)
cacheSolve(my_matrix)
source('~/Data Science Specialization/Course Data/makeCacheMatrix.R')
makeCacheMatrix(my_matrix)
cacheSolve(my_matrix)
makeCacheMatrix$set(my_matrix)
source('~/Data Science Specialization/Course Data/makeCacheMatrix.R')
funs <- makeCacheMatrix()
funs$set(matrix(1:4, 2))
funs$get()
funs$setinversion()
funs$getinversion()
funs$getinversion()
cacheSolve(funs)
cacheSolve(matrix(1:4, 2))
source('~/Data Science Specialization/Course Data/makeCacheMatrix.R')
makeCacheMatrix(my_matrix)
cacheSolve(my_matrix)
source('~/Data Science Specialization/Course Data/makeCacheMatrix.R')
makeCacheMatrix(my_matrix)
cacheSolve(my_matrix)
source('~/Data Science Specialization/Course Data/makeCacheMatrix.R')
makeCacheMatrix(matrix(1:4,2))
funs <- makeCacheMatrix(matrix(1:4,2))
funs$get()
funs$getinversion()
funs$setinversion()
source('~/Data Science Specialization/Course Data/makeCacheMatrix.R')
funs <- makeCacheMatrix(matrix(1:4, 2))
funs$get()
funs$setinversion()
funs$getinversion()
funs$set()
funs$set(matirx(1:4,2))
funs$set(matrix(1:4,2))
funs$get()
funs$setinversion()
funs$getinversion()
source('~/Data Science Specialization/Course Data/makeCacheMatrix.R')
funs <- makeCacheMatrix(matrix(1:4,2))
funs$set()
makeCacheMatrix(matrix(1:4, 2))
source('~/Data Science Specialization/Course Data/makeCacheMatrix.R')
makeCacheMatrix()
makeCacheMatrix$set(matrix(1:4,2))
funs <- makeCacheMatrix()
funs$set(matrix(1:4, 2))
funs$get()
funs$setinversion()
funs$getinversion()
cacheSolve(funs)
source('~/Data Science Specialization/Course Data/makeCacheMatrix.R')
B <- matrix(c(1,2,3,4), 2,2)
B
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
source('~/Data Science Specialization/Course Data/makeCacheMatrix.R')
B <- matrix(1:4, 2,2)
B
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
x
source('~/Data Science Specialization/Course Data/makeCacheMatrix.R')
B <- matrix(1:4, 2,2)
B1 <-  makeCacheMatrix(B)
cacheSolve(B1)
source('~/Data Science Specialization/Course Data/makeCacheMatrix.R')
source('~/Data Science Specialization/Course Data/makeCacheMatrix.R')
source('~/Data Science Specialization/Course Data/makeCacheMatrix.R')
source('~/Data Science Specialization/Course Data/cachematrix.R.R')
source('~/Data Science Specialization/Course Data/cachematrix.R.R')
source('~/Data Science Specialization/Course Data/cachematrix.R')
source('~/Data Science Specialization/Course Data/cachematrix.R')
hilbert <- function(n){}
hilbert <- function(n){ i <- 1:n }
hilbert <- function(n){
i <- 1:n
1 / outer(i - 1, i, "+")
}
x <- hilbert(1000)
svd(x)
system.time(svd(x))
hilbert <- function(n){
i <- 1:n
1 / outer(i - 1, i, "+")
}
x <- hilbert(1000)
system.time(svd(x))
set.seed(1)
rpois(5,2)
?set.seed
?ppois
?qpois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
swirl()
library(swirl)
ls()
rm(list = ls())
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size 100, prob = 0.7)
rbinom(1, size=100, prob = 0.7)
rbinom(1, size=100, prob = 0.7)
flips2 <- rbinom(100, size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
data(cars)
help(cars)
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
?par
par(col = "r")
par(col = "red")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
?points
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
rm(list = ls())
install.packages("RMySQL", type = "source")
library(RMySQL)
swirl()
library(swirl)
swirl()
1
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now(this_day)
this_moment <- now()
this_moment
second(this_moment)
ymd("1989-05-17")
mydate <- ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("19/20/12")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 11, minutes = 1)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(swirl)
rm(list = ls())
swirl()
1
swirl()
head(airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch = 8, col = "red", main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality)
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind, data = airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
pathtofile("plot1.R", local = TRUE)
pathtofile("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat|color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat|color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red", "blue"))
p1
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
play()
showMe(p2(1000))
showMe(p2(10000))
showMe(p2(100000))
nxt()
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue","green"), alpha = 0.5)
p3(5)
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5))
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5), alpha = 0.3)
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5, alpha = 0.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth("lm")
g + geom_point() + geom_smooth(method ="lm")
g + geom_point() + geom_smooth(method ="lm") + facet_grid(.~drv)
g + geom_point() + geom_smooth(method ="lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!", x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + them_bw(base_family = "Times")
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim(c(-3,3))
plot(myx, myy, type = "l", ylim(c(-3,3)))
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line(ylim(-3,3))
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title= "Swirl Rules!")
library(swirl)
swirl()
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(data = diamonds$carat, seq(0,1, len(4)), na.rm = TRUE)
cutpoints <- quantile(data = diamonds$carat, seq(0,1, length(4), na.rm = TRUE)
cutpoints <- quantile(data = diamonds$carat, seq(0,1, length(4)), na.rm = TRUE)
cutpoints <- quantile(data = diamonds$carat, seq(0,1, length(4)), na.rm = TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(data = diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
xyplot(price, carat, data = diamonds)
library(lattice)
xyplot(price, carat, data = diamonds)
xyplot(x = carat, y = price, data = diamonds)
xyplot(x = diamonds$carat, y = diamonds$price, data = diamonds)
g <- xyplot(x = diamonds$carat, y = diamonds$price, data = diamonds)
library(nlme)
xyplot(weight~Time | Diet, BodyWeight)
?xyplot
?text()
library(lattice)
library(datasets)
data(airquality)
p <- xyplots(Ozone~Wind|factor(Month), data = airquality)
p <- xyplot(Ozone~Wind|factor(Month), data = airquality)
qplot(Wind, Ozone, data = airquality, facets = .~ factor(Month))
?trellis.par.set()
?points
?lines()
?llines()
rm(list = ls())
getwd()
setwd(~./Data Science Specialization/Assignments/Reproducible Research/repdata_data_activity)
setwd("~./Data Science Specialization/Assignments/Reproducible Research/repdata_data_activity")
library(lubridate)
library(ggplot2)
library(dplyr)
df <- read.csv("activity.csv", header = TRUE, sep = ',', colClasses = c("numeric", "character", "integer"))
df$date <- ymd(df$date)
newdf <- aggregate(df$steps, list(df$date), FUN = sum)
colnames(newdf) <- c("Date", "Steps")
g <- ggplot(newdf, aes(Steps)) + geom_histogram(binwidth = 3000, fill = "red") + ggtitle("Steps per Day") + xlab("Daily Steps") + ylab("Frequency")
g
mean_steps <- mean(newdf$Steps, na.rm = TRUE)
mean_steps
median_steps <- median(newdf$Steps, na.rm = TRUE)
median_steps
str(df)
steps_time_series <- aggregate(steps~interval, data = df, FUN = mean, na.action = na.omit)
str(newdf)
steps_time_series$time <- steps_time_series$interval/100
g2 <- ggplot(steps_time_series, aes(time, steps)) + geom_line(col = "red") + ggtitle("Average steps per interval") + xlab("Time Interval") + ylab("Average Steps")
g2
steps_time_series$time <- steps_time_series$interval
g2
steps_time_series$time <- steps_time_series$interval
g2 <- ggplot(steps_time_series, aes(time, steps)) + geom_line(col = "red") + ggtitle("Average steps per interval") + xlab("Time Interval") + ylab("Average Steps")
g2
steps_time_series[which.max(steps_time_series$steps), ]
sum(is.na(df$steps))
df_fill <- df
missing <- is.na(df_fill$steps)
interval_average <- tapply(df_fill$interval, mean, na.rm = TRUE, simplify = TRUE)
interval_average <- tapply(df_fill$steps, mean, na.rm = TRUE, simplify = TRUE)
interval_average <- tapply(df_fill$steps, df_fill$interval, mean, na.rm = TRUE, simplify = TRUE)
df_fill$steps[missing] <- interval_average[as.character(df_fill$interval[missing])]
sum(is.na(df_fill$steps))
str(df_fill)
newdf_fill <- aggregate(df_fill$steps, list(df_fill$date), FUN = sum)
colnames(newdf_fill) <- c("Dates", "Steps")
g3 <- ggplot(newdf_fill, aes(Steps)) + geom_histogram(binwidth = 3000, fill = "black") + ggtitle("Steps per Day (filled missing values)") + xlab("Daily Steps") + ylab("Frequency")
g3
g3 <- ggplot(newdf_fill, aes(Steps)) + geom_histogram(binwidth = 3000, fill = "blue") + ggtitle("Steps per Day (filled missing values)") + xlab("Daily Steps") + ylab("Frequency")
g3
mean(newdf_fill$Steps)
median(newdf_fill$Steps)
head(newdf_fill)
df_fill
head(df_fill)
df_fill$numdate <- as.Date(df_fill$date, format = "%Y-%m-%d")
df_fill$day <- weekdays(df_fill$numdate)
df_fill$type <- ifelse(df_fill$day == 'Saturday'|df_fill$day == 'Sunday', 'weekend', 'weekday')
head(df_fill)
head(df)
steps_time_series_fill <- aggregate(steps~interval+type, data = df_fill, FUN = mean, na.action = na.omit)
steps_time_series_fill$time <- steps_time_series$interval
g4 <- ggplot(steps_time_series_fill, aes(time, steps)) + geom_line(col = "blue") + ggtitle("Steps per time interval: weekends/weekdays") + xlab("Time") + ylab("Steps")
g4
g4 <- ggplot(steps_time_series_fill, aes(time, steps)) + geom_line(col = "blue") + ggtitle("Steps per time interval: weekends/weekdays") + xlab("Time") + ylab("Steps") + facet_grid(type ~ .)
g4
